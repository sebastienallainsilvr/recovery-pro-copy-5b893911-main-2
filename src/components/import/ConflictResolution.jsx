
import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { AlertTriangle, Building2, Euro, CheckCircle, XCircle } from "lucide-react";

// Ordre de priorit√© des statuts (du moins avanc√© au plus avanc√©)
const STATUTS_PRIORITY = [
  "PENDING ASSIGNATION",
  "R1", "R2", "R3", "R4", "R5",
  "UNDER NEGOTIATION",
  "PROMISE TO PAY",
  "CONCILIATION - PENDING ASSIGNATION",
  "CONCILIATION - ONGOING MEETINGS",
  "LAWYER / CONCILIATION",
  "REPAYMENT PLAN TO SCHEDULE",
  "REPAYMENT PLAN ONGOING",
  "DISPUTE / LITIGATION",
  "PENDING TO BE OUTSOURCED",
  "OUTSOURCED TO AGENCY",
  "COLLECTIVE PROCEDURE",
  "FULLY RECOVERED",
  "WRITTEN OFF / CANCELLED"
];

const getMostAdvancedStatus = (statuts) => {
  return statuts.reduce((mostAdvanced, current) => {
    const currentIndex = STATUTS_PRIORITY.indexOf(current);
    const mostAdvancedIndex = STATUTS_PRIORITY.indexOf(mostAdvanced);
    return currentIndex > mostAdvancedIndex ? current : mostAdvanced;
  });
};

export default function ConflictResolution({ conflicts, onResolve, loading }) {
  const [resolutions, setResolutions] = useState({});
  const [autoResolveAll, setAutoResolveAll] = useState(false);

  const handleStatusChange = (companyId, statut) => {
    setResolutions(prev => ({
      ...prev,
      [companyId]: { ...prev[companyId], statutChoisi: statut, autoResolve: false }
    }));
  };

  const handleAutoResolveChange = (companyId, checked) => {
    const conflict = conflicts.find(c => c.companyId === companyId);
    const mostAdvanced = getMostAdvancedStatus(conflict.possibleStatuts);
    
    setResolutions(prev => ({
      ...prev,
      [companyId]: { 
        ...prev[companyId], 
        autoResolve: checked,
        statutChoisi: checked ? mostAdvanced : ""
      }
    }));
  };

  const handleApplyToAll = () => {
    const newResolutions = {};
    conflicts.forEach(conflict => {
      const mostAdvanced = getMostAdvancedStatus(conflict.possibleStatuts);
      newResolutions[conflict.companyId] = {
        statutChoisi: mostAdvanced,
        autoResolve: true
      };
    });
    setResolutions(newResolutions);
    setAutoResolveAll(true);
  };

  const handleResolve = () => {
    const finalResolutions = {};
    conflicts.forEach(conflict => {
      const resolution = resolutions[conflict.companyId];
      if (resolution?.statutChoisi) {
        finalResolutions[conflict.companyId] = {
          statutFinal: resolution.statutChoisi,
          montantTotal: conflict.totalAmount,
          creancesFusionnees: conflict.deals.map(deal => ({
            montant: deal.montant,
            statut: deal.statut,
            fournisseur: deal.provider
          })),
          noteAutoGenerated: `Dossier cr√©√© par fusion de ${conflict.deals.length} cr√©ances: ${conflict.deals.map(d => `${new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR' }).format(d.montant)} (${d.statut})`).join(', ')}`
        };
      }
    });
    
    onResolve(finalResolutions);
  };

  const handleCancel = () => {
    // Retourner √† l'√©tape de configuration
    window.location.reload();
  };

  const canResolve = conflicts.every(conflict => 
    resolutions[conflict.companyId]?.statutChoisi
  );

  const getStatutColor = (statut) => {
    const colors = {
      "PENDING ASSIGNATION": "bg-yellow-100 text-yellow-800",
      "R1": "bg-blue-100 text-blue-800",
      "R2": "bg-blue-100 text-blue-800", 
      "R3": "bg-blue-100 text-blue-800",
      "PROMISE TO PAY": "bg-green-100 text-green-800",
      "FULLY RECOVERED": "bg-emerald-100 text-emerald-800",
      "WRITTEN OFF / CANCELLED": "bg-slate-100 text-slate-800"
    };
    return colors[statut] || "bg-slate-100 text-slate-800";
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-orange-600">
            <AlertTriangle className="w-5 h-5" />
            R√©solution des conflits de statut ({conflicts.length} entreprises)
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Alert className="mb-6">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              Plusieurs cr√©ances avec des statuts diff√©rents ont √©t√© trouv√©es pour les m√™mes entreprises.
              Vous devez choisir un statut final pour chaque entreprise avant de continuer l'import.
            </AlertDescription>
          </Alert>

          {/* Actions globales */}
          <div className="flex gap-3 mb-6 p-4 bg-slate-50 rounded-lg">
            <Button 
              variant="outline" 
              onClick={handleApplyToAll}
              className="flex-1"
            >
              üìà Appliquer √† tous (statut le plus avanc√©)
            </Button>
            <Button 
              variant="outline" 
              onClick={handleCancel}
              className="text-red-600 border-red-300 hover:bg-red-50"
            >
              <XCircle className="w-4 h-4 mr-2" />
              Annuler l'import
            </Button>
          </div>

          {/* Liste des conflits */}
          <div className="space-y-6">
            {conflicts.map((conflict) => {
              const resolution = resolutions[conflict.companyId] || {};
              const mostAdvanced = getMostAdvancedStatus(conflict.possibleStatuts);
              
              return (
                <Card key={conflict.companyId} className="border-orange-200">
                  <CardContent className="pt-6">
                    {/* En-t√™te entreprise */}
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center gap-3">
                        <Building2 className="w-5 h-5 text-slate-400" />
                        <div>
                          <h4 className="font-semibold text-slate-900">
                            {conflict.nom_entreprise}
                          </h4>
                          <p className="text-sm text-slate-500">ID: {conflict.companyId}</p>
                          <div className="flex items-center gap-2 mt-1">
                            <Euro className="w-4 h-4 text-slate-400" />
                            <span className="font-semibold text-lg">
                              Montant total: {new Intl.NumberFormat('fr-FR', { 
                                style: 'currency', 
                                currency: 'EUR' 
                              }).format(conflict.totalAmount)}
                            </span>
                          </div>
                        </div>
                      </div>
                      <Badge variant="outline" className="text-orange-600">
                        {conflict.deals.length} cr√©ances
                      </Badge>
                    </div>

                    {/* D√©tail des cr√©ances */}
                    <div className="bg-slate-50 rounded-lg p-4 mb-4">
                      <h5 className="font-medium text-slate-700 mb-3">Cr√©ances en conflit :</h5>
                      <div className="space-y-2">
                        {conflict.deals.map((deal, index) => (
                          <div key={index} className="flex items-center justify-between text-sm bg-white p-2 rounded">
                            <div className="flex items-center gap-3">
                              <Badge className={getStatutColor(deal.statut)}>
                                {deal.statut}
                              </Badge>
                              <span className="text-slate-600">{deal.provider}</span>
                            </div>
                            <span className="font-semibold">
                              {new Intl.NumberFormat('fr-FR', { 
                                style: 'currency', 
                                currency: 'EUR' 
                              }).format(deal.montant)}
                            </span>
                          </div>
                        ))}
                      </div>
                    </div>

                    {/* Options de r√©solution */}
                    <div className="space-y-4">
                      {/* Option auto */}
                      <div className="flex items-center space-x-2 p-3 bg-green-50 rounded-lg border border-green-200">
                        <Checkbox
                          id={`auto-${conflict.companyId}`}
                          checked={resolution.autoResolve || false}
                          onCheckedChange={(checked) => handleAutoResolveChange(conflict.companyId, checked)}
                        />
                        <Label htmlFor={`auto-${conflict.companyId}`} className="flex-1">
                          <span className="font-medium text-green-800">
                            Prendre automatiquement le statut le plus avanc√©
                          </span>
                          <div className="flex items-center gap-2 mt-1">
                            <Badge className={getStatutColor(mostAdvanced) + " text-xs"}>
                              {mostAdvanced}
                            </Badge>
                            <span className="text-xs text-green-700">
                              (statut le plus avanc√© d√©tect√©)
                            </span>
                          </div>
                        </Label>
                      </div>

                      {/* S√©lection manuelle */}
                      {!resolution.autoResolve && (
                        <div className="p-3 border rounded-lg">
                          <Label className="font-medium text-slate-700 mb-3 block">
                            Ou choisir manuellement le statut final :
                          </Label>
                          <RadioGroup 
                            value={resolution.statutChoisi || ""} 
                            onValueChange={(value) => handleStatusChange(conflict.companyId, value)}
                            className="grid grid-cols-2 gap-2"
                          >
                            {conflict.possibleStatuts.map(statut => (
                              <div key={statut} className="flex items-center space-x-2">
                                <RadioGroupItem value={statut} id={`${conflict.companyId}-${statut}`} />
                                <Label htmlFor={`${conflict.companyId}-${statut}`} className="text-sm">
                                  <Badge className={getStatutColor(statut) + " text-xs"}>
                                    {statut}
                                  </Badge>
                                </Label>
                              </div>
                            ))}
                          </RadioGroup>
                        </div>
                      )}

                      {/* Statut s√©lectionn√© */}
                      {resolution.statutChoisi && (
                        <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
                          <div className="flex items-center gap-2">
                            <CheckCircle className="w-4 h-4 text-blue-600" />
                            <span className="text-blue-800 font-medium">Statut final s√©lectionn√© :</span>
                            <Badge className={getStatutColor(resolution.statutChoisi)}>
                              {resolution.statutChoisi}
                            </Badge>
                          </div>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>

          {/* Actions finales */}
          <div className="flex justify-end gap-3 pt-6 border-t">
            <Button variant="outline" onClick={handleCancel}>
              <XCircle className="w-4 h-4 mr-2" />
              Annuler
            </Button>
            <Button 
              onClick={handleResolve}
              disabled={!canResolve || loading}
              className="bg-orange-600 hover:bg-orange-700"
            >
              {loading ? (
                <>
                  <div className="animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2" />
                  R√©solution en cours...
                </>
              ) : (
                <>
                  <CheckCircle className="w-4 h-4 mr-2" />
                  R√©soudre les conflits ({Object.keys(resolutions).filter(k => resolutions[k]?.statutChoisi).length}/{conflicts.length})
                </>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
